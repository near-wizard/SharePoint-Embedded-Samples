{
	"info": {
		"_postman_id": "bcd61cb1-3408-4c0a-a3b1-7cdcb0b5c426",
		"name": "SharePoint Embedded",
		"description": "[Microsoft Graph](https://docs.microsoft.com/graph/overview) is the gateway to data and intelligence in Microsoft 365. It provides a unified programmability model that you can use to access the tremendous amount of data in Microsoft 365, Windows 10, and Enterprise Mobility + Security. Use the wealth of data in Microsoft Graph to build apps for organizations and consumers that interact with millions of users.\n\n## Create Environment File\n\nIn order to use the RaaS Postman collection we've just imported, we will need to create a valid environment file that contains all the variables in the underlying scripts from this collection. Most need initial values, but fields like ContainerID and PermissionID are generated in post script execution, and later re-used as parameters in other requests. Once the environment file has been created, make sure the collection is set up to use it. This can be done by selecting the newly created environment in the drop-down near the top right hand of the application window.\n\n| Field |  |\n|----------|---|\n| ClientID |  |\n| ClientSecret |  |\n| TenantID |  |\n| tid |  |\n| RootSiteUrl |  |\n| ContainerTypeId |  |\n| TenantName |  |\n| ContainerId |  |\n| PermissionId |  |\n| FileId |  |\n\nThis is the environment file set up for our sample app:\n\n<img src=\"https://content.pstmn.io/1dcda27e-020b-42a8-85cd-f2ef52c93db0/UmF3IEVudi5wbmc=\">\n\n## Acquire a delegate Graph token\n\nTo execute Graph APIs on our containers, we will need to first acquire a valid Graph authorization token. This can be done by using the acquire token setup in the Delegated tab. Click on the Delegate tab under the root \"RaaS Postman Collection\" item, and select the Authorization tab. The window should look like this:\n\n<img src=\"https://content.pstmn.io/03cb2159-10a4-485c-ab44-5bbf93522209/ZGVsZWdhdGV0b2tlbi5wbmc=\" width=\"619\" height=\"563\">\n\nThe \"Configure New Token\" workflow pulls the necessary parameters from the environment file and uses them to retrieve a valid token. Pressing the \"Get New Access Token\" may prompt a credentials window if it’s the first time using the collection. The tenants credentials should be entered here for either a regular or admin user. Once complete, you should see the following window appear:\n\n<img src=\"https://content.pstmn.io/d9cd45b9-8591-4b5e-9e41-4010ff07f219/bmV3dG9rZW5nb3QucG5n\" width=\"446\" height=\"295\">\n\nClick \"Proceed\" and you'll be a presented with the newly created access token. Name your token appropriately, and then select \"Use Token\" for it to be including in any further issued Graph request.\n\n<img src=\"https://content.pstmn.io/031fdd54-e4c9-423b-86c7-af4e9839f37b/RGVsZWdhdGUgLSBVc2UgVG9rZW4ucG5n\">\n\n## Acquire a delegate Vroom token\n\nTo execute storageContainer API requests, we need to follow the similar approach we did for Graph tokens, except now we will use the \"Containers\" Authorization tab to do so.\n\n<img src=\"https://content.pstmn.io/ea4cbae5-3bcd-4270-bea5-f8935c0d7a6f/RGVsZWdhdGUgLSAybmQgVG9rZW4ucG5n\">\n\nWe follow the \"Get New Access Token\" flow, entering tenant credentials if prompted, and select \"Use Token\" to terminate the flow. We are now ready to use both Graph container specific calls and Vroom storageContainer endpoints.\n\n## Creating your first storage container\n\nIn order to begin experimenting with the RaaS Postman collection, we will first need a container to interact with. We can create one using the POST request labelled \"Create Container\".\n\n<img src=\"https://content.pstmn.io/e846726c-0f02-49b5-bec6-02e2baa4cbf0/RGVsZWdhdGUgLSBDcmVhdGUgQ29udGFpbmVyLnBuZw==\">\n\nYou can specify the containers display name and description in the \"Body\" tab of the request shown above. When you're ready to create your container, press \"Send\" and await response confirmation that your container was created successfully. You should see a response that returns a list of fields, including the ID of the container as well as the container create time.\n\n<img src=\"https://content.pstmn.io/e95e6033-0d9a-46e6-aaeb-188f714bf4bf/Y29udGFpbmVyZGV0YWlscy5wbmc=\">\n\nThe ID of the container is now stored in your environment file and will be the subject of an further container operations, both Graph or Vroom requests.\n\n## Interacting with storage containers\n\nNow that the Container ID field has been set in our environment file, we can proceed to use the remaining delegate requests in the collection, such as getting a storage containers drive items, or creating permissions on the container. The specifics of how to use these requests can be found in the rest of the documentation below.\n\n<img src=\"https://content.pstmn.io/d52f800d-bb46-4313-a5e6-39ce7b86c64d/QWxsIFBvc3RtYW4gRnVuY3Rpb25hbGl0eS5wbmc=\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11522575"
	},
	"item": [
		{
			"name": "Delegated",
			"item": [
				{
					"name": "Containers",
					"item": [
						{
							"name": "Create Container",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 201) {\r",
											"    var json = pm.response.json();\r",
											"    postman.setEnvironmentVariable(\"ContainerId\", json.id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"displayName\": \"Sample App Container 1\",\r\n    \"description\": \"First container description.\",\r\n    \"containerTypeId\": \"{{ContainerTypeId}}\"\r\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Container",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/activate",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"activate"
									]
								},
								"description": "This API will let callers explicitly activate a fileStorageContainer. It is idempotent, so calling it multiple time will yield the same response and will not create any side effects. Upon successfull activation the container's `status` will be set to \"active\"."
							},
							"response": []
						},
						{
							"name": "Get Container",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}?$select=id,displayName,containerTypeId,status,description,customProperties&$expand=permissions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}"
									],
									"query": [
										{
											"key": "$select",
											"value": "id,displayName,containerTypeId,status,description,customProperties"
										},
										{
											"key": "$expand",
											"value": "permissions"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Containers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers?$filter=containerTypeId eq {{ContainerTypeId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers"
									],
									"query": [
										{
											"key": "$filter",
											"value": "containerTypeId eq {{ContainerTypeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 201) {\r",
											"    var json = pm.response.json();\r",
											"    postman.setEnvironmentVariable(\"PermissionId\", json.id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roles\": [\"reader\"],\r\n  \"grantedToV2\": {\r\n    \"user\": {\r\n      \"userPrincipalName\": \"{{UserAlias}}@{{TenantName}}.onmicrosoft.com\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Permission",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roles\": [\"writer\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions/{{PermissionId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions",
										"{{PermissionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Group Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 201) {\r",
											"    var json = pm.response.json();\r",
											"    postman.setEnvironmentVariable(\"PermissionId\", json.id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roles\": [\"reader\"],\r\n  \"grantedToV2\": {\r\n    \"user\": {\r\n      \"userPrincipalName\": \"{{GroupAlias}}@{{TenantName}}.onmicrosoft.com\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Container Custom Properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"customProperties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Container Custom Properties",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"urlPath\": {  \r\n        \"value\": \"northwind\",   \r\n        \"isSearchable\": false  \r\n    },\r\n    \"tags\": {\r\n        \"value\": \"northwind traders nwt nw\",\r\n        \"isSearchable\": true\r\n    },\r\n    \"department\": { \r\n        \"value\": \"finance\",   \r\n        \"isSearchable\": true \r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"customProperties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Soft Delete Container by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 204) {\r",
											"    pm.environment.set(\"DeletedContainerId\", pm.environment.get(\"ContainerId\"));\r",
											"    pm.environment.unset(\"ContainerId\");\r",
											"    pm.environment.unset(\"PermissionId\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Soft Deleted Containers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers?$filter=containerTypeId eq {{ContainerTypeId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"deletedContainers"
									],
									"query": [
										{
											"key": "$filter",
											"value": "containerTypeId eq {{ContainerTypeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Hard Delete Container by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 204) {\r",
											"    pm.environment.unset(\"SoftDeletedContainerId\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers/{{SoftDeletedContainerId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"deletedContainers",
										"{{SoftDeletedContainerId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Files",
					"item": [
						{
							"name": "Sharing",
							"item": [
								{
									"name": "Send a sharing invitation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"        var json = JSON.parse(responseBody);\r",
													"        postman.setEnvironmentVariable(\"PermissionId\", json.value[0].id);\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"requireSignIn\": true,\r\n    \"sendInvitation\": false,\r\n    \"roles\": [\"read\"],\r\n    \"recipients\": [{\r\n            \"email\": \"{{SharingTenantUser}}\"\r\n        }\r\n    ],\r\n    \"message\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/invite",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"invite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send a sharing invitation (Unknown Guest)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"view\",\r\n    \"scope\": \"organization\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"createLink"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send a sharing invitation (Guest)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"        var json = JSON.parse(responseBody);\r",
													"        postman.setEnvironmentVariable(\"PermissionId\", json.value[0].id);\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"requireSignIn\": true,\r\n    \"sendInvitation\": false,\r\n    \"roles\": [\"read\"],\r\n    \"recipients\": [{\r\n            \"email\": \"{{SharingGuestUser}}\"\r\n        }\r\n    ],\r\n    \"message\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/invite",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"invite"
											]
										}
									},
									"response": []
								},
								{
									"name": "List sharing permissions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"permissions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get sharing permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"permissions",
												"{{PermissionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete sharing permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"permissions",
												"{{PermissionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Drive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DriveItems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/root/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"root",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload a File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        var json = JSON.parse(responseBody);\r",
											"        postman.setEnvironmentVariable(\"FileId\", json.id);\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root:/Ad Slogans.docx:/content",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"root:",
										"Ad Slogans.docx:",
										"content"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"New Folder\",\n  \"folder\": {}\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"root",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Files in Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{ItemId}}/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{ItemId}}",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get container SharePointIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}?$select=SharePointIds",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}"
									],
									"query": [
										{
											"key": "$select",
											"value": "SharePointIds"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename a file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        var json = JSON.parse(responseBody);\r",
											"        postman.setEnvironmentVariable(\"FileId\", json.id);\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Northwind Proposal Updated.docx\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file thumbnails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/thumbnails",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"thumbnails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/versions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"versions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search DriveItems in Drive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/search(q='{contoso}')",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"root",
										"search(q='{contoso}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view share link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"view\",\r\n    \"scope\": \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"createLink"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create edit share link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"edit\",\r\n    \"scope\": \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"createLink"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create preview link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/preview",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"preview"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search",
					"item": [
						{
							"name": "Search containers within CT Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"ContainerTypeId:{{ContainerTypeId}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search containers by Title Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"Title:'mango'\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search containers by Description Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"Description:'pineapple'\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search containers by Custom Property Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"department:'marketing'\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search containers by Title+Description+CT Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"drive\"\n            ],\n            \"query\": {\n                \"queryString\": \"Title:'mango' AND Description:'project' AND ContainerTypeId:{{ContainerTypeId}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search by Title in Container Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"Title:'improvements' AND ContainerId:{{ContainerId}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search by File Type in Container Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"FileType:docx AND ContainerId:{{ContainerId}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search content in Container Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"'awesome' AND ContainerId:{{ContainerId}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Page search results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"from\": 0,\n            \"size\": 15\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort search results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"sortProperties\": [\n                {\n                    \"name\": \"lastModifiedDateTime\",\n                    \"isDescending\": \"true\" // default is false\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request spelling correction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "SdkVersion",
										"type": "text",
										"value": "postman-graph/v2.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"requests\": [\n    {\n      \"entityTypes\": [\n        \"driveItem\"\n      ],\n      \"query\": {\n        \"queryString\": \"informatino\"\n      },\n      \"from\": 0,\n      \"size\": 5\n    }\n  ],\n  \"queryAlterationOptions\": {\n    \"enableSuggestion\": true,\n    \"enableModification\": true\n  }\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refine results with string aggregations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"aggregations\": [\n                {\n                    \"field\": \"FileType\",\n                    \"size\": 20,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"count\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                },\n                {\n                    \"field\": \"contentclass\",\n                    \"size\": 20,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"keyAsString\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refine results with numeric aggregations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"aggregations\": [\n                {\n                    \"field\": \"Size\",\n                    \"size\": 15,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"keyAsNumber\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0,\n                        \"ranges\": [\n                            {\n                                \"to\": \"100\"\n                            },\n                            {\n                                \"from\": \"100\",\n                                \"to\": \"1000\"\n                            },\n                            {\n                                \"from\": \"1000\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply refined query passing the aggregationToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"aggregationFilters\": [\n                \"contentclass:\\\"ǂǂ5354535f4c6973744974656d5f446f63756d656e744c696272617279\\\"\",\n                \"FileType:\\\"ǂǂ646f6378\\\"\"                \n            ],\n            \"aggregations\": [\n                {\n                    \"field\": \"FileType\",\n                    \"size\": 20,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"count\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                },\n                {\n                    \"field\": \"contentclass\",\n                    \"size\": 15,\n                    \"bucketDefinition\": {\n                        \"sortBy\": \"keyAsString\",\n                        \"isDescending\": \"true\",\n                        \"minimumCount\": 0\n                    }\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trim duplicated SharePoint search results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read.All, Sites.Read.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\"\n            },\n            \"trimDuplicate\": true\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with queryTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read.All, Sites.Read.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requests\": [\n        {\n            \"entityTypes\": [\n                \"driveItem\"\n            ],\n            \"query\": {\n                \"queryString\": \"contoso\",\n                \"queryTemplate\": \"({searchTerms})\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with basic collapse",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"requests\": [\r\n        {\r\n            \"entityTypes\": [\r\n                \"listItem\"\r\n            ],\r\n            \"query\": {\r\n                \"queryString\": \"test\"\r\n            },\r\n            \"fields\": [\r\n                \"title\"\r\n            ],\r\n            \"collapseProperties\": [\r\n                {\r\n                    \"fields\": [\r\n                        \"title\"\r\n                    ],\r\n                    \"limit\": 3\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with compound collapse",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"requests\": [\r\n        {\r\n            \"entityTypes\": [\r\n                \"listItem\"\r\n            ],\r\n            \"query\": {\r\n                \"queryString\": \"cat\"\r\n            },\r\n            \"fields\": [\r\n                \"title\",\r\n                \"createdBy\"\r\n            ],\r\n            \"collapseProperties\": [\r\n                {\r\n                    \"fields\": [\r\n                        \"title\",\r\n                        \"createdBy\"\r\n                    ],\r\n                    \"limit\": 3\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search with multi-level collapse",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"requests\": [\r\n        {\r\n            \"entityTypes\": [\r\n                \"listItem\"\r\n            ],\r\n            \"query\": {\r\n                \"queryString\": \"cat\"\r\n            },\r\n            \"fields\": [\r\n                \"title\",\r\n                \"createdBy\"\r\n            ],\r\n            \"collapseProperties\": [\r\n                {\r\n                    \"fields\": [\r\n                        \"title\"\r\n                    ],\r\n                    \"limit\": 3\r\n                },\r\n                {\r\n                    \"fields\": [\r\n                        \"createdBy\"\r\n                    ],\r\n                    \"limit\": 2\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/search/query",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"search",
										"query"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Security",
					"item": [
						{
							"name": "eDiscovery",
							"item": [
								{
									"name": "Case Creation",
									"item": [
										{
											"name": "List ediscoveryCases",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ediscoveryCase",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var json = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"ediscoveryCaseId\", json.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"Test Container Queries 2\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ediscoveryCase",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update ediscoveryCase",
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"externalId\": \"Updated external case value 12345\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Custodians",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var json = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"custodianId\", json.id);",
															"postman.setEnvironmentVariable(\"custodianEmail\", json.email);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\":\"{{custodianEmail}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"custodians"
													]
												}
											},
											"response": []
										},
										{
											"name": "List ediscoveryCustodian",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"custodians"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create custodian userSource",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var json = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"custodianUserSource\", json.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"{{custodianEmail}}\",\n    \"includedSources\": \"mailbox, site\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/{{custodianId}}/userSources",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"custodians",
														"{{custodianId}}",
														"userSources"
													]
												}
											},
											"response": []
										},
										{
											"name": "ediscoveryCustodian: applyHold",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ids\": [\n    \"{{custodianId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/applyHold",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"custodians",
														"applyHold"
													]
												}
											},
											"response": []
										},
										{
											"name": "List userSources",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/{{custodianId}}/userSources",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"custodians",
														"{{custodianId}}",
														"userSources"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ediscoveryNoncustodialDataSources",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var json = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"noncustodialId\", json.id);",
															"postman.setEnvironmentVariable(\"noncustodialDataSource\", json.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"dataSource\" : { \n        \"@odata.type\" : \"microsoft.graph.security.siteSource\", \n        \"site@odata.bind\" : \"{{SiteId}}\" \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialDataSources",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"noncustodialDataSources"
													]
												}
											},
											"response": []
										},
										{
											"name": "ediscoveryNoncustodialDataSource: applyHold",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ids\": [\n    \"{{noncustodialId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialDataSources/applyHold",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"noncustodialDataSources",
														"applyHold"
													]
												}
											},
											"response": []
										},
										{
											"name": "List ediscoveryNoncustodialDataSources",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialDataSources",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"noncustodialDataSources"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Workflow automation",
									"item": [
										{
											"name": "Create searches",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var json = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"ediscoverySearchId\", json.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"Microsoft Graph Search\",\n    \"description\": \"This is an eDiscovery Premium search using Microsoft Graph\",\n    \"contentQuery\": \"HasAttachment=true\",\n    \"custodianSources@odata.bind\": [\n        \"https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/custodians/{{custodianId}}/userSources/{{custodianUserSource}}\"\n    ],\n    \"noncustodialSources@odata.bind\": [\n        \"https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/noncustodialdatasources/{{noncustodialDataSource}}\"\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"searches"
													]
												}
											},
											"response": []
										},
										{
											"name": "List searches",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"searches"
													]
												}
											},
											"response": []
										},
										{
											"name": "ediscoverySearch: estimate Statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches/{{ediscoverySearchId}}/estimateStatistics",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"searches",
														"{{ediscoverySearchId}}",
														"estimateStatistics"
													]
												}
											},
											"response": []
										},
										{
											"name": "List lastEstimateStatisticsOperation",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/searches/{{ediscoverySearchId}}/lastEstimateStatisticsOperation",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"searches",
														"{{ediscoverySearchId}}",
														"lastEstimateStatisticsOperation"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create reviewSets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var json = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"ediscoveryReviewSetId\", json.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"My Microsoft Graph Review Set\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"reviewSets"
													]
												}
											},
											"response": []
										},
										{
											"name": "List reviewSets",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"reviewSets"
													]
												}
											},
											"response": []
										},
										{
											"name": "ediscoveryReviewSet: addToReviewSet",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"search\": {\n        \"id\": \"{{ediscoverySearchId}}\"\n    },\n    \"additionalDataOptions\": \"linkedFiles\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/addToReviewSet",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"reviewSets",
														"{{ediscoveryReviewSetId}}",
														"addToReviewSet"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ediscoveryReviewSetQuery",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var json = JSON.parse(responseBody);",
															"postman.setEnvironmentVariable(\"ediscoveryReviewSetQueryId\", json.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"Microsoft Graph Query\",\n    \"contentQuery\": \"(Author=\\\"edison\\\")\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"reviewSets",
														"{{ediscoveryReviewSetId}}",
														"queries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update ediscoveryReviewSetQuery",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"Microsoft Graph Query (Update)\",\n    \"contentQuery\": \"(ContentType=document)\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries/{{ediscoveryReviewSetQueryId}}",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"reviewSets",
														"{{ediscoveryReviewSetId}}",
														"queries",
														"{{ediscoveryReviewSetQueryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List queries",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"reviewSets",
														"{{ediscoveryReviewSetId}}",
														"queries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete ediscoveryReviewSetQuery",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/reviewSets/{{ediscoveryReviewSetId}}/queries/{{ediscoveryReviewSetQueryId}}",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"reviewSets",
														"{{ediscoveryReviewSetId}}",
														"queries",
														"{{ediscoveryReviewSetQueryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "List caseOperations",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://graph.microsoft.com/v1.0/security/cases/ediscoveryCases/{{ediscoveryCaseId}}/operations",
													"protocol": "https",
													"host": [
														"graph",
														"microsoft",
														"com"
													],
													"path": [
														"v1.0",
														"security",
														"cases",
														"ediscoveryCases",
														"{{ediscoveryCaseId}}",
														"operations"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get alerts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/security/alerts",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"security",
										"alerts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get alerts with high severity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/security/alerts?$filter=Severity eq 'High'&$top=5",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"security",
										"alerts"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Severity eq 'High'"
										},
										{
											"key": "$top",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get alerts from Azure Security Center",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/security/alerts?$filter=vendorInformation/provider eq 'ASC'&$top=5",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"security",
										"alerts"
									],
									"query": [
										{
											"key": "$filter",
											"value": "vendorInformation/provider eq 'ASC'"
										},
										{
											"key": "$top",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get alerts filtered by category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/security/alerts?$filter=Category eq 'ransomware'&$top=5",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"security",
										"alerts"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Category eq 'ransomware'"
										},
										{
											"key": "$top",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get alerts filtered by destination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/security/alerts?$filter=networkConnections/any(d:d/destinationAddress eq '{destination-address}')",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"security",
										"alerts"
									],
									"query": [
										{
											"key": "$filter",
											"value": "networkConnections/any(d:d/destinationAddress eq '{destination-address}')"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get alerts filtered by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/security/alerts?$filter=Status eq 'NewAlert'&$top=1",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"security",
										"alerts"
									],
									"query": [
										{
											"key": "$filter",
											"value": "Status eq 'NewAlert'"
										},
										{
											"key": "$top",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secure scores",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/security/secureScores?$top=5",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"security",
										"secureScores"
									],
									"query": [
										{
											"key": "$top",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secure scores control profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/security/secureScoreControlProfiles?$top=5",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"security",
										"secureScoreControlProfiles"
									],
									"query": [
										{
											"key": "$top",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TI indicators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            var json = JSON.parse(responseBody);\r",
											"            postman.setEnvironmentVariable(\"TIIndicatorId\", json.value[0].id);\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/security/tiIndicators",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"security",
										"tiIndicators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TI indicator by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityEvents.Read.All, SecurityEvents.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/security/tiIndicators/{{TIIndicatorId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"security",
										"tiIndicators",
										"{{TIIndicatorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get security actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityActions.Read.All, SecurityActions.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            var json = JSON.parse(responseBody);\r",
											"            postman.setEnvironmentVariable(\"SecurityActionsId\", json.value[0].id);\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/security/securityActions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"security",
										"securityActions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get security action by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityActions.Read.All, SecurityActions.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            var json = JSON.parse(responseBody);\r",
											"            postman.setEnvironmentVariable(\"SecurityActionsId\", json.value[0].id);\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/security/securityActions/{{SecurityActionsId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"security",
										"securityActions",
										"{{SecurityActionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List retention labels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *SecurityActions.Read.All, SecurityActions.ReadWrite.All* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            var json = JSON.parse(responseBody);\r",
											"            postman.setEnvironmentVariable(\"SecurityActionsId\", json.value[0].id);\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/security/labels/retentionLabels",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"security",
										"labels",
										"retentionLabels"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "scope",
						"value": "FileStorageContainer.Selected Files.Read.All",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{ClientSecret}}",
						"type": "string"
					},
					{
						"key": "state",
						"value": "",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "https://login.microsoftonline.com/common/oauth2/v2.0/token",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Graph Delegated Token",
						"type": "string"
					},
					{
						"key": "redirect_uri",
						"value": "https://oauth.pstmn.io/v1/browser-callback",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					},
					{
						"key": "tokenType",
						"value": "",
						"type": "string"
					},
					{
						"key": "accessToken",
						"value": "",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{ClientID}}",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "Containers",
					"item": [
						{
							"name": "Register ContainerType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"async function ensureAccessToken () {\r",
											"    var validToken = false;\r",
											"    var token = pm.environment.get('AppOnlyCertSPOToken');\r",
											"    if (token) {\r",
											"        console.log('checking stored token');\r",
											"        try {\r",
											"            var tokenObj = KJUR.jws.JWS.parse(token);\r",
											"            var nbf = tokenObj.payloadObj.nbf;\r",
											"            var exp = tokenObj.payloadObj.exp;\r",
											"            var now = getTimeInSec();\r",
											"            if (nbf <= now && now < exp) {\r",
											"                validToken = true;\r",
											"            } else {\r",
											"                console.log(\"Stored access token is expired\");\r",
											"            }\r",
											"        } catch (e) {\r",
											"            console.log(\"Unable to parse stored access token\");\r",
											"        }\r",
											"        \r",
											"    } else {\r",
											"        console.log(\"No access token found\");\r",
											"    }\r",
											"    if (!validToken) {\r",
											"        acquireAccessToken();\r",
											"    }\r",
											"}\r",
											"\r",
											"function acquireAccessToken() {\r",
											"    console.log(\"Acquiring a new access token\");\r",
											"    var jwt = getRequestJwt();\r",
											"    console.log(jwt);\r",
											"    var tid = pm.environment.get('ConsumingTenantId');\r",
											"\r",
											"    const tokenRequest = {\r",
											"        url: `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/x-www-form-urlencoded'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'urlencoded',\r",
											"            urlencoded: [\r",
											"                { key: 'client_assertion_type', value: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer' },\r",
											"                { key: 'client_assertion', value: jwt },\r",
											"                { key: 'client_id', value: pm.environment.get('ClientID') },\r",
											"                { key: 'scope', value: pm.environment.get('RootSiteUrl') + '/.default' },\r",
											"                { key: 'grant_type', value: 'client_credentials' }\r",
											"            ]\r",
											"        }\r",
											"    };\r",
											"    pm.sendRequest(tokenRequest, (error, response) => {\r",
											"        if (error) {\r",
											"            console.log('Unable to acquire token: ' + error);\r",
											"        } else {\r",
											"            var responseJson = response.json();\r",
											"            var token = responseJson.access_token;\r",
											"            pm.environment.set('AppOnlyCertSPOToken', token);\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"function getRequestJwt () {\r",
											"    var header = {\r",
											"        'alg': 'RS256',\r",
											"        'typ': 'JWT',\r",
											"        'x5t': safeBase64EncodedThumbprint(pm.environment.get('CertThumbprint'))\r",
											"    };\r",
											"\r",
											"    var now = getTimeInSec();\r",
											"    var tid = pm.environment.get('ConsumingTenantId');\r",
											"    var payload = {\r",
											"        'aud': `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`,\r",
											"        'exp': now + 60 * 60,\r",
											"        'iss': pm.environment.get('ClientID'),\r",
											"        'jti': pm.variables.replaceIn('{{$guid}}'),\r",
											"        'nbf': now,\r",
											"        'sub': pm.environment.get('ClientID'),\r",
											"        'iat': now\r",
											"    };\r",
											"\r",
											"    var encryptedPk = pm.environment.get('CertPrivateKey');\r",
											"    var decryptedPk = encryptedPk;\r",
											"    if (pm.environment.has('CertPassword') && pm.environment.get('CertPassword') !== '') {\r",
											"        decryptedPk = KEYUTIL.getKey(encryptedPk, pm.environment.get('CertPassword'));\r",
											"    }\r",
											"    var sHeader = JSON.stringify(header);\r",
											"    var sPayload = JSON.stringify(payload);\r",
											"    return KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, decryptedPk);\r",
											"}\r",
											"\r",
											"function getTimeInSec() {\r",
											"    return Math.floor(Date.now() / 1000);\r",
											"}\r",
											"\r",
											"function safeBase64EncodedThumbprint (thumbprint) {\r",
											"  var numCharIn128BitHexString = 128/8*2;\r",
											"  var numCharIn160BitHexString = 160/8*2;\r",
											"  var thumbprintSizes  = {};\r",
											"  thumbprintSizes[numCharIn128BitHexString] = true;\r",
											"  thumbprintSizes[numCharIn160BitHexString] = true;\r",
											"  var thumbprintRegExp = /^[a-f\\d]*$/;\r",
											"\r",
											"  var hexString = thumbprint.toLowerCase().replace(/:/g, '').replace(/ /g, '');\r",
											"\r",
											"  if (!thumbprintSizes[hexString.length] || !thumbprintRegExp.test(hexString)) {\r",
											"    throw 'The thumbprint does not match a known format';\r",
											"  }\r",
											"  \r",
											"  var base64 = (Buffer.from(hexString, 'hex')).toString('base64');\r",
											"  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r",
											"}\r",
											"\r",
											"var navigator = {}; // fake a navigator object for the lib\r",
											"var window = {}; // fake a window object for the lib\r",
											"eval(pm.globals.get('jsrsasign-js'));\r",
											"ensureAccessToken();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AppOnlyCertSPOToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": [\r\n    {\r\n      \"appId\": \"{{ClientID}}\",\r\n      \"delegated\": [\"full\"],\r\n      \"appOnly\": [\"full\"]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{RootSiteUrl}}/_api/v2.1/storageContainerTypes/{{ContainerTypeId}}/applicationPermissions",
									"host": [
										"{{RootSiteUrl}}"
									],
									"path": [
										"_api",
										"v2.1",
										"storageContainerTypes",
										"{{ContainerTypeId}}",
										"applicationPermissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register ContainerType with Graph Explorer access",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"async function ensureAccessToken () {\r",
											"    var validToken = false;\r",
											"    var token = pm.environment.get('AppOnlyCertSPOToken');\r",
											"    if (token) {\r",
											"        console.log('checking stored token');\r",
											"        try {\r",
											"            var tokenObj = KJUR.jws.JWS.parse(token);\r",
											"            var nbf = tokenObj.payloadObj.nbf;\r",
											"            var exp = tokenObj.payloadObj.exp;\r",
											"            var now = getTimeInSec();\r",
											"            if (nbf <= now && now < exp) {\r",
											"                validToken = true;\r",
											"            } else {\r",
											"                console.log(\"Stored access token is expired\");\r",
											"            }\r",
											"        } catch (e) {\r",
											"            console.log(\"Unable to parse stored access token\");\r",
											"        }\r",
											"        \r",
											"    } else {\r",
											"        console.log(\"No access token found\");\r",
											"    }\r",
											"    if (!validToken) {\r",
											"        acquireAccessToken();\r",
											"    }\r",
											"}\r",
											"\r",
											"function acquireAccessToken() {\r",
											"    console.log(\"Acquiring a new access token\");\r",
											"    var jwt = getRequestJwt();\r",
											"    console.log(jwt);\r",
											"    var tid = pm.environment.get('ConsumingTenantId');\r",
											"\r",
											"    const tokenRequest = {\r",
											"        url: `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Content-Type': 'application/x-www-form-urlencoded'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'urlencoded',\r",
											"            urlencoded: [\r",
											"                { key: 'client_assertion_type', value: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer' },\r",
											"                { key: 'client_assertion', value: jwt },\r",
											"                { key: 'client_id', value: pm.environment.get('ClientID') },\r",
											"                { key: 'scope', value: pm.environment.get('RootSiteUrl') + '/.default' },\r",
											"                { key: 'grant_type', value: 'client_credentials' }\r",
											"            ]\r",
											"        }\r",
											"    };\r",
											"    pm.sendRequest(tokenRequest, (error, response) => {\r",
											"        if (error) {\r",
											"            console.log('Unable to acquire token: ' + error);\r",
											"        } else {\r",
											"            var responseJson = response.json();\r",
											"            var token = responseJson.access_token;\r",
											"            pm.environment.set('AppOnlyCertSPOToken', token);\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"function getRequestJwt () {\r",
											"    var header = {\r",
											"        'alg': 'RS256',\r",
											"        'typ': 'JWT',\r",
											"        'x5t': safeBase64EncodedThumbprint(pm.environment.get('CertThumbprint'))\r",
											"    };\r",
											"\r",
											"    var now = getTimeInSec();\r",
											"    var tid = pm.environment.get('ConsumingTenantId');\r",
											"    var payload = {\r",
											"        'aud': `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`,\r",
											"        'exp': now + 60 * 60,\r",
											"        'iss': pm.environment.get('ClientID'),\r",
											"        'jti': pm.variables.replaceIn('{{$guid}}'),\r",
											"        'nbf': now,\r",
											"        'sub': pm.environment.get('ClientID'),\r",
											"        'iat': now\r",
											"    };\r",
											"\r",
											"    var encryptedPk = pm.environment.get('CertPrivateKey');\r",
											"    var decryptedPk = encryptedPk;\r",
											"    if (pm.environment.has('CertPassword') && pm.environment.get('CertPassword') !== '') {\r",
											"        decryptedPk = KEYUTIL.getKey(encryptedPk, pm.environment.get('CertPassword'));\r",
											"    }\r",
											"    var sHeader = JSON.stringify(header);\r",
											"    var sPayload = JSON.stringify(payload);\r",
											"    return KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, decryptedPk);\r",
											"}\r",
											"\r",
											"function getTimeInSec() {\r",
											"    return Math.floor(Date.now() / 1000);\r",
											"}\r",
											"\r",
											"function safeBase64EncodedThumbprint (thumbprint) {\r",
											"  var numCharIn128BitHexString = 128/8*2;\r",
											"  var numCharIn160BitHexString = 160/8*2;\r",
											"  var thumbprintSizes  = {};\r",
											"  thumbprintSizes[numCharIn128BitHexString] = true;\r",
											"  thumbprintSizes[numCharIn160BitHexString] = true;\r",
											"  var thumbprintRegExp = /^[a-f\\d]*$/;\r",
											"\r",
											"  var hexString = thumbprint.toLowerCase().replace(/:/g, '').replace(/ /g, '');\r",
											"\r",
											"  if (!thumbprintSizes[hexString.length] || !thumbprintRegExp.test(hexString)) {\r",
											"    throw 'The thumbprint does not match a known format';\r",
											"  }\r",
											"  \r",
											"  var base64 = (Buffer.from(hexString, 'hex')).toString('base64');\r",
											"  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r",
											"}\r",
											"\r",
											"var navigator = {}; // fake a navigator object for the lib\r",
											"var window = {}; // fake a window object for the lib\r",
											"eval(pm.globals.get('jsrsasign-js'));\r",
											"ensureAccessToken();\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AppOnlyCertSPOToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": [\r\n    {\r\n      \"appId\": \"{{ClientID}}\",\r\n      \"delegated\": [\"full\"],\r\n      \"appOnly\": [\"full\"]\r\n    },\r\n    {\r\n        /*\r\n            This adds the Graph Explorer AppId to your Container Type with full permmissions\r\n            on delegated access. Note that you cannot create Containers with Graph Explore as\r\n            those calls must be made with a confidential client, and Graph Explorer only creates\r\n            public client tokens. But other APIs, include the Drive and DriveItem related calls,\r\n            should work. \r\n        */\r\n        \"appId\": \"de8bc8b5-d9f9-48b1-a8ad-b748da725064\", // Graph Explorer AppId\r\n        \"delegated\": [\"full\"],\r\n        \"appOnly\": [\"none\"] //Graph Explorer only supports delegated auth\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{RootSiteUrl}}/_api/v2.1/storageContainerTypes/{{ContainerTypeId}}/applicationPermissions",
									"host": [
										"{{RootSiteUrl}}"
									],
									"path": [
										"_api",
										"v2.1",
										"storageContainerTypes",
										"{{ContainerTypeId}}",
										"applicationPermissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Container",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 201) {\r",
											"    var json = pm.response.json();\r",
											"    pm.environment.set(\"ContainerId\", json.id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"displayName\": \"Container Created with App-Only Auth\",\r\n    \"description\": \"Great description\",\r\n    \"containerTypeId\": \"{{ContainerTypeId}}\"\r\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Container",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/activate",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"activate"
									]
								},
								"description": "This API will let callers explicitly activate a fileStorageContainer. It is idempotent, so calling it multiple time will yield the same response and will not create any side effects. Upon successfull activation the container's `status` will be set to \"active\"."
							},
							"response": []
						},
						{
							"name": "List Containers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers?$filter=containerTypeId eq {{ContainerTypeId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers"
									],
									"query": [
										{
											"key": "$filter",
											"value": "containerTypeId eq {{ContainerTypeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Container",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 201) {\r",
											"    var json = pm.response.json();\r",
											"    postman.setEnvironmentVariable(\"PermissionId\", json.id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roles\": [\"reader\"],\r\n  \"grantedToV2\": {\r\n    \"user\": {\r\n      \"userPrincipalName\": \"{{UserAlias}}@{{TenantName}}.onmicrosoft.com\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Permission",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roles\": [\"writer\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions/{{PermissionId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions",
										"{{PermissionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Group Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 201) {\r",
											"    var json = pm.response.json();\r",
											"    postman.setEnvironmentVariable(\"PermissionId\", json.id);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roles\": [\"reader\"],\r\n  \"grantedToV2\": {\r\n    \"user\": {\r\n      \"userPrincipalName\": \"{{GroupAlias}}@{{TenantName}}.onmicrosoft.com\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/permissions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Container Custom Properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"customProperties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Container Custom Properties",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"urlPath\": {  \r\n        \"value\": \"northwind\",   \r\n        \"isSearchable\": true  \r\n    },   \r\n    \"foo\": { \r\n        \"value\": \"bar\",   \r\n        \"isSearchable\": false  \r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}/customProperties",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}",
										"customProperties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Soft Delete Container by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 204) {\r",
											"    pm.environment.set(\"DeletedContainerId\", pm.environment.get(\"ContainerId\"));\r",
											"    pm.environment.unset(\"ContainerId\");\r",
											"    pm.environment.unset(\"PermissionId\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{ContainerId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"containers",
										"{{ContainerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Soft Deleted Containers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers?$filter=containerTypeId eq {{ContainerTypeId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"deletedContainers"
									],
									"query": [
										{
											"key": "$filter",
											"value": "containerTypeId eq {{ContainerTypeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Hard Delete Container by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code === 204) {\r",
											"    pm.environment.unset(\"SoftDeletedContainerId\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers/{{SoftDeletedContainerId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"storage",
										"fileStorage",
										"deletedContainers",
										"{{SoftDeletedContainerId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"async function ensureAccessToken () {",
									"    var validToken = false;",
									"    var token = pm.environment.get('AppOnlyCertGraphToken');",
									"    if (token) {",
									"        console.log('checking stored token');",
									"        try {",
									"            var tokenObj = KJUR.jws.JWS.parse(token);",
									"            var nbf = tokenObj.payloadObj.nbf;",
									"            var exp = tokenObj.payloadObj.exp;",
									"            var now = getTimeInSec();",
									"            if (nbf <= now && now < exp) {",
									"                validToken = true;",
									"            } else {",
									"                console.log(\"Stored access token is expired\");",
									"            }",
									"        } catch (e) {",
									"            console.log(\"Unable to parse stored access token\");",
									"        }",
									"        ",
									"    } else {",
									"        console.log(\"No access token found\");",
									"    }",
									"    if (!validToken) {",
									"        acquireAccessToken();",
									"    }",
									"}",
									"",
									"function acquireAccessToken() {",
									"    console.log(\"Acquiring a new access token\");",
									"    var jwt = getRequestJwt();",
									"    console.log(jwt);",
									"    var tid = pm.environment.get('ConsumingTenantId');",
									"",
									"    const tokenRequest = {",
									"        url: `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`,",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/x-www-form-urlencoded'",
									"        },",
									"        body: {",
									"            mode: 'urlencoded',",
									"            urlencoded: [",
									"                { key: 'client_assertion_type', value: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer' },",
									"                { key: 'client_assertion', value: jwt },",
									"                { key: 'client_id', value: pm.environment.get('ClientID') },",
									"                { key: 'scope', value: 'https://graph.microsoft.com/.default' },",
									"                { key: 'grant_type', value: 'client_credentials' }",
									"            ]",
									"        }",
									"    };",
									"    pm.sendRequest(tokenRequest, (error, response) => {",
									"        if (error) {",
									"            console.log('Unable to acquire token: ' + error);",
									"        } else {",
									"            var responseJson = response.json();",
									"            var token = responseJson.access_token;",
									"            if (!token)",
									"                throw Error(\"Invalid or no access token received\");",
									"            pm.environment.set('AppOnlyCertGraphToken', token);",
									"        }",
									"    });",
									"}",
									"",
									"function getRequestJwt () {",
									"    var header = {",
									"        'alg': 'RS256',",
									"        'typ': 'JWT',",
									"        'x5t': safeBase64EncodedThumbprint(pm.environment.get('CertThumbprint'))",
									"    };",
									"",
									"    var now = getTimeInSec();",
									"    var tid = pm.environment.get('ConsumingTenantId');",
									"    var payload = {",
									"        'aud': `https://login.microsoftonline.com/${tid}/oauth2/v2.0/token`,",
									"        'exp': now + 60 * 60,",
									"        'iss': pm.environment.get('ClientID'),",
									"        'jti': pm.variables.replaceIn('{{$guid}}'),",
									"        'nbf': now,",
									"        'sub': pm.environment.get('ClientID'),",
									"        'iat': now",
									"    };",
									"",
									"    var encryptedPk = pm.environment.get('CertPrivateKey');",
									"    var decryptedPk = encryptedPk;",
									"    if (pm.environment.has('CertPassword') && pm.environment.get('CertPassword') !== '') {",
									"        decryptedPk = KEYUTIL.getKey(encryptedPk, pm.environment.get('CertPassword'));",
									"    }",
									"    var sHeader = JSON.stringify(header);",
									"    var sPayload = JSON.stringify(payload);",
									"    return KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, decryptedPk);",
									"}",
									"",
									"function getTimeInSec() {",
									"    return Math.floor(Date.now() / 1000);",
									"}",
									"",
									"function safeBase64EncodedThumbprint (thumbprint) {",
									"  var numCharIn128BitHexString = 128/8*2;",
									"  var numCharIn160BitHexString = 160/8*2;",
									"  var thumbprintSizes  = {};",
									"  thumbprintSizes[numCharIn128BitHexString] = true;",
									"  thumbprintSizes[numCharIn160BitHexString] = true;",
									"  var thumbprintRegExp = /^[a-f\\d]*$/;",
									"",
									"  var hexString = thumbprint.toLowerCase().replace(/:/g, '').replace(/ /g, '');",
									"",
									"  if (!thumbprintSizes[hexString.length] || !thumbprintRegExp.test(hexString)) {",
									"    throw 'The thumbprint does not match a known format';",
									"  }",
									"  ",
									"  var base64 = (Buffer.from(hexString, 'hex')).toString('base64');",
									"  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');",
									"}",
									"",
									"var navigator = {}; // fake a navigator object for the lib",
									"var window = {}; // fake a window object for the lib",
									"eval(pm.globals.get('jsrsasign-js'));",
									"ensureAccessToken();",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Files",
					"item": [
						{
							"name": "Additive Permissions",
							"item": [
								{
									"name": "List sharing permissions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"permissions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get sharing permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"permissions",
												"{{PermissionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete sharing permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"try {\r",
													"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
													"    {\r",
													"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        if (pm.response.status === \"Forbidden\")\r",
													"        {\r",
													"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
													"        }\r",
													"    }\r",
													"}\r",
													"catch (e) {\r",
													"    console.log(e);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/permissions/{{PermissionId}}",
											"protocol": "https",
											"host": [
												"graph",
												"microsoft",
												"com"
											],
											"path": [
												"v1.0",
												"drives",
												"{{ContainerId}}",
												"items",
												"{{FileId}}",
												"permissions",
												"{{PermissionId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Drive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DriveItems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/root/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"root",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload a File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        var json = JSON.parse(responseBody);\r",
											"        postman.setEnvironmentVariable(\"FileId\", json.id);\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root:/Ad Slogans.docx:/content",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"root:",
										"Ad Slogans.docx:",
										"content"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"New Folder\",\n  \"folder\": {}\n}"
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"root",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Files in Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{ItemId}}/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{ItemId}}",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get container SharePointIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}?$select=SharePointIds",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}"
									],
									"query": [
										{
											"key": "$select",
											"value": "SharePointIds"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename a file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"        var json = JSON.parse(responseBody);\r",
											"        postman.setEnvironmentVariable(\"FileId\", json.id);\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Northwind Proposal Updated.docx\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file thumbnails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/thumbnails",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"thumbnails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get file versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/versions",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"versions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search DriveItems in Drive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.Read* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/root/search(q='{contoso}')",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"root",
										"search(q='{contoso}')"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create view share link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"view\",\r\n    \"scope\": \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"createLink"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create edit share link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try {\r",
											"    if (responseBody.indexOf(\"InvalidAuthenticationToken\") !== -1)\r",
											"    {\r",
											"        console.log(\"You need to run *On behalf of a User | Get User Access Token* request first.\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        if (pm.response.status === \"Forbidden\")\r",
											"        {\r",
											"            console.log(\"You need to add user delegated permissions in your application to at least *Files.ReadWrite* in portal.azure.com and then consent as user or Grant admin consent in portal. And re-run *On behalf of a User | Get User Access Token* request to update access token. \");\r",
											"        }\r",
											"    }\r",
											"}\r",
											"catch (e) {\r",
											"    console.log(e);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"edit\",\r\n    \"scope\": \"organization\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/drives/{{ContainerId}}/items/{{FileId}}/createLink",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"drives",
										"{{ContainerId}}",
										"items",
										"{{FileId}}",
										"createLink"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "## Create Environment File\n\nIn order to use the RaaS Postman collection we've just imported, we will need to create a valid environment file that contains all the variables in the underlying scripts from this collection. Most need initial values, but fields like ContainerID and PermissionID are generated in post script execution, and later re-used as parameters in other requests. Once the environment file has been created, make sure the collection is set up to use it. This can be done by selecting the newly created environment in the drop-down near the top right hand of the application window.\n\n<img src=\"https://content.pstmn.io/de257c5f-524a-4d66-a5f5-79366dcf2675/RW52IFNjaGVtYS5wbmc=\">\n\nTake note of the key field additions: **tid** (the tenant ID from AAD where your application resides in), **CertThumbprint**, and **CertPrivateKey**\n\n## Run the create-certificate.ps1 script\n\nNext, you will need to run the provided `create-certificate.ps1` in an administrator privileged Powershell window to generate the .cer and .key files that will use in the following steps. Make sure to run the script in a newly created folder where the path is easily found. You will be prompted to enter a certificate name and the files will `.cer` and `.key` files will be written in the root of the folder you executed your script from.\n\n## Upload the .cer file to your Azure AD app\n\nOpen the `Certificates & Secrets` pane within your Application Definition in Azure Portal, and proceed to upload the `.cer` file that was created above. Once uploaded, make sure you copy the full thumbprint to your clipboard. You will use this to populate the `CertThumbprint` value in your Postman Environment File.\n\n<img src=\"https://content.pstmn.io/4a6306b0-4ca9-4ed5-8d99-318d31c92a60/Y2VyIHNlbGVjdGlvbi5wbmc=\" width=\"608\" height=\"438\">\n\n<img src=\"https://content.pstmn.io/5bdb391a-1d98-4f30-86e9-165ba1c32232/QUFEUG9ydGFsLnBuZw==\">\n\n## Set the CertThumbprint environment variable\n\nNext, open your Environment file and set the value of CertThumbprint to your copied value, and save the file. Refer to the Schema screenshot earlier for reference.\n\n## Open .key file and retrieve its contents\n\nOpen the .key file that the Powershell script also created in a text editor and copy its entire contents to the clipboard. You will use this to set the value of the CertPrivateKey environment variable in Postman.\n\n<img src=\"https://content.pstmn.io/6431ada4-3978-48fa-9892-5cc0ef992b61/a2V5IHNlbGVjdGlvbi5wbmc=\">\n\n<img src=\"https://content.pstmn.io/9aa5ea5a-5918-40e0-9305-5b93dcee86c2/cHJpdmF0ZWtleS5wbmc=\">\n\n## Set the CertPrivateKey environment variable\n\nPaste the string into the `CertPrivateKey` value and save the file. Both `CertThumbprint` and `CertPrivateKey` should now be set.\n\n<img src=\"https://content.pstmn.io/b6be5564-20f2-4124-8565-ac5743dfcc23/RW52IC0gd2l0aCBQcml2YXRlIEtleS5wbmc=\" alt=\"\">\n\n## Run the Create Container request in the Application/Containers folder\n\nYou should now be able to run the `CreateContainer` in the Application/Containers folder. Execute the request and confirm that container creation was successful. Refer to the API reference for complete documentation of request body etc.\n\n<img src=\"https://content.pstmn.io/6ad80261-bab4-48b1-a03b-a3b05d547df1/Q29udGFpbmVyQ3JlYXRpb24ucG5n\" width=\"634\" height=\"247\">",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{AppOnlyCertGraphToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// download jsrsasign library and save it to a global variable",
							"if (!pm.globals.has('jsrsasign-js')) {",
							"    pm.sendRequest(",
							"        'https://kjur.github.io/jsrsasign/jsrsasign-all-min.js',",
							"        function (err, res) {",
							"            if (err) {",
							"                throw new Error(err);",
							"            } else {",
							"                console.log('Downloaded RSA library');",
							"                pm.globals.set('jsrsasign-js', res.text());",
							"            }",
							"        }",
							"    );",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// if status 4xx",
							"// remove 'AppOnlyCertSPOToken' from environment "
						]
					}
				}
			]
		},
		{
			"name": "Admin (Delegated)",
			"item": [
				{
					"name": "EnumerateContainerType",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers?$filter=containerTypeId eq {{containerTypeId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers"
							],
							"query": [
								{
									"key": "$filter",
									"value": "containerTypeId eq {{containerTypeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetContainer",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateContainer",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"displayName\": \"Updated Name\", \r\n  \"description\": \"Updated Description\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{containerId} ",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{containerId} "
							]
						}
					},
					"response": []
				},
				{
					"name": "ListPermissions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}/permissions",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddPermission",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"roles\": [\"reader\"], \r\n  \"grantedToV2\": { \r\n    \"user\": { \r\n      \"userPrincipalName\": \"jacob@fabrikam.com\" \r\n        } \r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}/permissions",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePermission",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"@context\":\"#$delta\", \r\n  \"value\": [ \r\n    { \r\n      \"roles\": [\"reader\"], \r\n      \"grantedToV2\": { \r\n        \"user\": { \r\n          \"userPrincipalName\": \"mike@live.com\" \r\n        } \r\n      } \r\n    }, \r\n    { \r\n      \"roles\": [\"manager\"], \r\n      \"grantedToV2\": { \r\n        \"user\": { \r\n          \"userPrincipalName\": \"jason@gmail.com\" \r\n        } \r\n      } \r\n    }, \r\n    { \r\n      \"roles\": [\"writer\"], \r\n      \"grantedToV2\": { \r\n        \"user\": { \r\n          \"userPrincipalName\": \"tyler@outlook.com\" \r\n        } \r\n      } \r\n    } \r\n  ] \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}/permissions/{{permissionId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}",
								"permissions",
								"{{permissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkUpdatePermissions",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"@context\":\"#$delta\", \r\n  \"value\": [ \r\n    { \r\n      \"roles\": [\"reader\"], \r\n      \"grantedToV2\": { \r\n        \"user\": { \r\n          \"userPrincipalName\": \"mike@live.com\" \r\n        } \r\n      } \r\n    }, \r\n    { \r\n      \"roles\": [\"manager\"], \r\n      \"grantedToV2\": { \r\n        \"user\": { \r\n          \"userPrincipalName\": \"jason@gmail.com\" \r\n        } \r\n      } \r\n    }, \r\n    { \r\n      \"roles\": [\"writer\"], \r\n      \"grantedToV2\": { \r\n        \"user\": { \r\n          \"userPrincipalName\": \"tyler@outlook.com\" \r\n        } \r\n      } \r\n    } \r\n  ] \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}/permissions",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteContainerPermission",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}/permissions/{{permissionId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}",
								"permissions",
								"{{permissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SoftDeleteContainer(to Recycle)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSoftDeletedContainer",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers/{{containerId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"deletedContainers",
								"{{containerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListSoftDeletedContainers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers/{{containerId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"deletedContainers",
								"{{containerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RestoreSoftDeletedContainer",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/deletedContainers/{{containerId}}/restore",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"deletedContainers",
								"{{containerId}}",
								"restore"
							]
						}
					},
					"response": []
				},
				{
					"name": "PermanentlyDeleteContainer",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}/permanentDelete",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}",
								"permanentDelete"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetContainerSensitivityLabels",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers?$filter=containerTypeId eq {containerTypeId}&$select=*,assignedSensitivityLabel,owners",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers"
							],
							"query": [
								{
									"key": "$filter",
									"value": "containerTypeId eq {containerTypeId}"
								},
								{
									"key": "$select",
									"value": "*,assignedSensitivityLabel,owners"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateSensitivityLabel",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n  \"assignedSensitivityLabel\": { \r\n    \"labelId\": \"47a681f9-e287-4709-bc3a-f142423ec801\" \r\n  } \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://graph.microsoft.com/beta/storage/fileStorage/containers/{{containerId}}",
							"protocol": "https",
							"host": [
								"graph",
								"microsoft",
								"com"
							],
							"path": [
								"beta",
								"storage",
								"fileStorage",
								"containers",
								"{{containerId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "scope",
						"value": "FileStorageContainer.Manage.All",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{ClientSecret}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{ClientID}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "https://login.microsoftonline.com/common/oauth2/v2.0/token",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": true,
						"type": "boolean"
					},
					{
						"key": "redirect_uri",
						"value": "https://oauth.pstmn.io/v1/browser-callback",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Graph Delegate Token",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "v1.0 $metadata",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json;odata.metadata=full"
					}
				],
				"url": {
					"raw": "https://graph.microsoft.com/v1.0/$metadata",
					"protocol": "https",
					"host": [
						"graph",
						"microsoft",
						"com"
					],
					"path": [
						"v1.0",
						"$metadata"
					]
				}
			},
			"response": []
		},
		{
			"name": "beta $metadata",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json;odata.metadata=full"
					}
				],
				"url": {
					"raw": "https://graph.microsoft.com/beta/$metadata",
					"protocol": "https",
					"host": [
						"graph",
						"microsoft",
						"com"
					],
					"path": [
						"beta",
						"$metadata"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(!pm.request.headers.find(\"SdkVersion\")) {",
					"    pm.request.headers.add({key: \"SdkVersion\", value: \"postman-graph/v2.0\"});",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}
